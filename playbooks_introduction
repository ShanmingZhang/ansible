
=============================
Ansible’s playbooks: Introduction

* An ansible’s configuration, deployment, and orchestration language.
  - the relationship is like follows:
     - ansible modules are the tools
     - ansible playbooks are instruction manuals
     - ansible host inventory are raw material

* Describe a policy you want your remote systems to enforce, or a set of steps in a general IT process.
  - basic level: used to manage configurations of and deployments to remote machines
  - more advanced level: updates, delegate actions to other hosts, interacting with monitoring servers and load balancers.

* Designed to be human-readable and are developed in a basic text language.
* Can organize playbooks in multiple ways.

=============================

* About playbooks
  - different from ad-hoc task execution mode (Ad-Hoc Commands)
  - the basis for a really simple configuration management, multi-machine deployment system.
  - suited to deploying complex applications
  - declare configurations and launch these tasks synchronously or asynchronously.

* Playbook language
  - expressed in YAML format and have a minimum of syntax
  - every playbook is composed of one or more ‘plays’ in a list.
     +: a playbook = play#1 + play#2 …. + play#n
  - play:
     +: the goal of a play is to map a group of hosts and tasks
     +: at basic level, a task can be considered as a call to an ansible module.
  - playbook of multiple ‘plays’
     +: is possible to orchestrate multi-machine deployments, on different hosts and groups

* Playbook language example

-example of only one play in a playbook
###
---
- hosts: webservers
  vars:
    http_port: 80
    max_clients: 200
  remote_user: root
  tasks:
  - name: ensure apache is at the latest version
    yum:
      name: httpd
      state: latest
  - name: write the apache config file
    template:
      src: /srv/httpd.j2
      dest: /etc/httpd.conf
    notify:
    - restart apache
  - name: ensure apache is running
    service:
      name: httpd
      state: started
  handlers:
    - name: restart apache
      service:
        name: httpd
        state: restarted
###
-example of two plays in a playbook
###

---
- hosts: webservers
  remote_user: root

  tasks:
  - name: ensure apache is at the latest version
    yum:
      name: httpd
      state: latest
  - name: write the apache config file
    template:
      src: /srv/httpd.j2
      dest: /etc/httpd.conf

- hosts: databases
  remote_user: root

  tasks:
  - name: ensure postgresql is at the latest version
    yum:
      name: postgresql
      state: latest
  - name: ensure that postgresql is started
    service:
      name: postgresql
      state: started

###
- Plays, like tasks, run in the order specified in the playbook: top to bottom.

* Playbook language features
   - Hosts and Users [key words: hosts, remote_user, become, become_user, become_method, order]
     +: for each play in a playbook, we can choose which machines in our infrastructure to target and what remote user to complete the tasks
     +: hosts: a list of one or more groups or host patterns, separated by colons.
     +: remote_user: the name of user account,  can also be defined per play and task;
     +: example:
     
	###   remote_user for a play
	---
	- hosts: webservers
          remote_user: root
 	###

	### remote_user for a play and each task
        ---
	- hosts: webservers
	  remote_user: root
	  tasks:
		- name: test connection
	  	  ping:
	  	  remote_user: yourname
        ###
	### allow another user is available to run
	---
	- hosts: webservers
	　remote_user: yourname
　　　　   become: yes
        ###
	### also allow another user is available to run a specified task
	---
	- hosts: webservers
	  remote_user: yourname
	  tasks:
		- service:
			name: nginx
			state: started
		become: yes
		become_method: sudo
        ###

	### firstly login as you, and then become a specified different user, then root.
	---
	- hosts: webservers
	  remote_user: yourname
          become: yes
          become_user: postgres
        ###

	### also can specify a privilege escalation method like su or sudo
	---
	- hosts: webservers
	  remote_user: yourname
          become: yes
          become_user: postgres
          become_method: su
  	###
    +: --ask-become-pass:  can specify a password to sudu, run ansible-playbook with --ask-become-pass
    +: order:  can also control the order in which hosts are run. supplied by the inventory
	###
		- hosts: all
		  order: sorted     #-> possible values: inventory, reverse_inventory, sorted, reverse_sorted, shuffle
		  gather_facts: False
		  tasks:
			- debug:
			    var: inventory_hostname
	###

   - Task list [key words: tasks, name, template {src, dest}, copy, command, shell, ignore_errors, service {name, state}]
     +: tasks are executed in order, one at a time
     +: within a play, all hosts are going to get the same task directives.
     +: the playbook runs from top to bottom, hosts with failed tasks are taken out of the rotation for the entire playbook. If things fail, simply correct the playbook file and rerun.
     +: the goal of each task is to execute a ansible module, with very specific arguments.
     +: variables can be used in arguments to modules.
     +: every task have a name, which is included in the output from running the playbook, and human readable output. can be used to provide good descriptions of each task step.
     +: Task format:
          #-> action: module options (old version format)
          #-> module: options (recommended format)
     +: examples:
	### service module
	   tasks:
	  - name: make sure apache is running
	    service:
	      name: httpd
	      state: started
	###

	### command modules
	tasks:
	  - name: enable selinux
	    command: /sbin/setenforce 1
	###

	### shell modules
	tasks:
	  - name: run this command and ignore the result
	    shell: /usr/bin/somecommand || /bin/true
	###

	### shell modules
	tasks:
	  - name: run this command and ignore the result
	    shell: /usr/bin/somecommand
	    ignore_errors: True
	###

	### If the action line is getting too long for comfort you can break it on a space and indent any continuation lines:
	tasks:
	  - name: Copy ansible inventory file to client
	    copy: src=/etc/ansible/hosts dest=/etc/ansible/hosts
		    owner=root group=root mode=0644
	###

	### Variables can be used in action lines. Suppose you defined a variable called vhost in the vars section, you could do this:
	tasks:
	  - name: create a virtual host file for {{ vhost }}
	    template:
	      src: somefile.j2
	      dest: /etc/httpd/conf.d/{{ vhost }}
	###


   - Handlers: Running Operations On Change
     +: Playbooks recognize the change on remote system and have a basic event system that can be used to respond to change.
     +: The ‘notify’ actions about handlers are triggered at the end of each block of tasks in a play.
     +: only be triggered once even if notified by multiple different tasks. 
        For example, the apache need to be restarted because multiple tasks have changed its config file, 
        but, for the ansible’s handler, apache will only be bounced once to avoid unnecessary restarts.
        ### handlers of a task defined in  ‘notify’ section
	- name: template configuration file
  	  template:
           src: template.j2
           dest: /etc/foo.conf
          notify:
           - restart memcached
           - restart apache
       ###
     +: Handlers are lists of tasks, not really any different from regular tasks
     +: Handlers are referenced by a globally unique name
     +: Handlers are notified by notifiers. If nothing notifies a handler, it will not run.
     +: Handlers will be performed only once, after all of tasks complete in a particular play.
        ### another handler model? no notify.
        handlers:
                - name: restart memcached
                  service:
        	          name: memcached
        	          state: restarted
    	        - name: restart apache
      	          service:
        	        name: apache
        	        state: restarted
        ###
     +: Handlers can also “listen” to generic topics, and tasks can notify those topics, (as ansible 2.2)
        ###  make it much easier to trigger multiple handlers.
        ###  decouple handlers from their names, making it easier to share handlers among playbooks and roles
        handlers:
                - name: restart memcached
                  service:
                    name: memcached
                    state: restarted
                    listen: "restart web services"
                - name: restart apache
                  service:
                    name: apache
                    state:restarted
                    listen: "restart web services"

        tasks:
                - name: restart everything
                  command: echo "this task will restart the web services"
                  notify: "restart web services"
        ###

     +: Handlers notified within pre_tasks, tasks, and post_tasks sections are automatically flushed in the end of section where they were notified;
     +: Handlers notified within roles section are automatically flushed in the end of tasks section, but before any tasks handlers.
	For example: If you ever want to flush all the handler commands immediately you can do this:
	### any handlers would be processed early when the meta statement was reached.
	tasks:
	   - shell: some tasks go here
	   - meta: flush_handlers
	   - shell: some other tasks
	### This is a bit of a niche case but can come in handy from time to time.

* Executing A Playbook
  how do you run a playbook? It’s simple. Let’s run a playbook using a parallelism level of 10:
  ###
  ansible-playbook playbook.yml -f 10
  ###

* Check the syntax of a playbook, use ansible-playbook with the --syntax-check flag
* See detailed output from successful modules with the —verbose flag
* To see what hosts would be affected by a playbook before you run it, you can do this:
  ###
  ansible-playbook playbook.yml --list-hosts
  ###
